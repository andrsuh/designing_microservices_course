# Application name is used by Eureka Service Discovery, identifying traces in Zipkin
spring.application.name=task-coordinator-service
server.port=8095

# Database and Hibernate properties
database.schema.name=task_coordinator
spring.datasource.url=jdbc:postgresql://localhost:5432/laundry_db
spring.datasource.username=laundry_db_user
spring.datasource.password=123
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Validates if db schema correspond to entity
spring.jpa.hibernate.ddl-auto=validate
spring.datasource.initialization-mode=always

# Define db schema
spring.jpa.properties.hibernate.default_schema=${database.schema.name}
spring.flyway.schemas=${database.schema.name}
spring.flyway.placeholders.schema=${database.schema.name}

# Kafka properties

# property for activation kafka's consumer-beans. This beans are used by
# working app to interact with other services through kafka. Consumers are
# disabled in tests (will be mocked in next version of tests)
kafka.activateConsumers=true
kafka.bootstrapAddress=localhost:9092
# name of the topic to which laundry-management-service send it's messages through kafka.
# task-coordinator-service is subscribed to this topic
laundry.management.topic.name=LaundryManagementEvents
# name of the topic to which task-coordinator send it's messages through kafka.
taskcoordinator.topic.name=TaskCoordinatorEvents
laundry.management.listener.name=LaundryManagementServiceEventListener
# name of the topic to which order-management-service send it's messages through kafka.
# task-coordinator-service is subscribed to this topic
order.management.topic.name=OrderManagementEvents
order.management.listener.name=OrderManagementServiceEventListener

# Zipkin properties

# This property says to send all created traces to Zipkin
spring.sleuth.sampler.probability=1.0
# We want to explicitly create spans for messaging
spring.sleuth.messaging.kafka.enabled=false
# We don't want to create new span for this scheduled job
spring.sleuth.scheduled.skipPattern=com.microservices.taskcoordinator.scheduled.ScheduledEventSender

# Mircometer properties

# Elasticsearch address
management.metrics.export.elastic.host=http://localhost:9200
# Time interval for metrics pushing
management.metrics.export.elastic.step=10s

# String used to uniquely identify host
host.id=localhost:${server.port}

# String used to uniquely identify application instance (used to differentiate metrics of each instance)
grafana.instance.name=${spring.application.name}:${host.id}